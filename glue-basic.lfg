GLUE   BASIC   CONFIG (1.0)  
  ROOTCAT   CP.  
  FILES  .
  LEXENTRIES   (ENGLISH BASIC).  
  RULES   (ENGLISH BASIC).
  TEMPLATES (ENGLISH BASIC) (GLUE BASIC).
  GOVERNABLERELATIONS    SUBJ OBJ OBJ?+ OBL?+ COMP XCOMP.
  SEMANTICFUNCTIONS    ADJUNCT TOPIC FOCUS.  
  NONDISTRIBUTIVES    NUM PERS.
  EPSILON   e.  
OPTIMALITYORDER NOGOOD.

----

"AVM representations of meaning constructors appear as members of the GLUE set at f-structure."

ENGLISH   BASIC   RULES (1.0)

   CP --> C'.

   C' --> (C) 
 	  IP.

   C =   Comp.

   IP --> (NP: (^ SUBJ) = !) 
 	  I'.

   I' --> (I)
 	  VP.

   I = Aux.

   VP --> V'.

   V' --> (V)
 	  (NP: (^ OBJ) = !)
 	  (NP: (^ OBJ-TH) = !)
 	  (CP: (^ COMP) = !).

   NP --> (Det)
 	  N'.

   N' --> (Adj: ! $ (^ ADJ))
 	  N.

----

ENGLISH   BASIC   LEXICON (1.0)

"Complementizer"

  that 	  Comp * (^ COMPFORM) = 'that'.

"Nouns"

  David   N * @(PROPERNOUN David).

  Chris   N * @(PROPERNOUN Chris).

  Tracy   N * @(PROPERNOUN Tracy).

  Kim   N * @(PROPERNOUN Kim).

  man 	  N * @(NOUN0 man).

  woman   N * @(NOUN0 woman).

  book 	  N * @(NOUN0 book).

  person  N * @(NOUN0 person).

  everyone N * @(QUANT everyone every person).

"Adjectives"

  interesting Adj * @(ADJ interesting).

"Determiners"

  the 	  Det * @(SPEC the).

  a 	  Det * @(SPEC a).

  every   Det * @(SPEC every).
  

"Verbs"

  yawned  V * @(VERB-SUBJ yawn)
	      @VPAST.

  smiled  V * @(VERB-SUBJ smile)
	      @VPAST.

  saw 	  V * @(VERB-SUBJ-OBJ see)
	      @VPAST.

  thought V * @(VERB-SUBJ-COMP think)
	      @COMP-TENSE
	      @VPAST.

  gave 	  V * @(VERB-SUBJ-OBJ-OBJTH give)
	      @VPAST.

----

ENGLISH   BASIC   TEMPLATES (1.0)

"Nouns"

   PROPERNOUN(P) = (^ PRED) = 'P'
	  @(GLUE-PROPERNOUN P).

   NOUN0(P) = (^ PRED) = 'P'
	  @(GLUE-NOUN0 P).

"Quantifiers like 'everyone' call the template for quantificational 
determiners and the template for common nouns."

   QUANT(P Q N) = (^ PRED) = 'P'
          @(GLUE-QUANT-MC Q)
          @(GLUE-NOUN0-MC N).

"Adjectives"

   ADJ(P) = (^ PRED) = 'P'
	  @(GLUE-ADJ0 P).

"Determiners"

   SPEC(Q) = (^ SPEC PRED) = 'Q'
	  @(GLUE-QUANT-DET Q).

"Verbs"

   VERB-SUBJ(P) =
	  (^ PRED) = 'P<(^ SUBJ)>'
	  @(GLUE-VERB-SUBJ P).
	  
   VERB-SUBJ-OBJ(P) =
	  (^ PRED) = 'P<(^ SUBJ)(^ OBJ)>'
	  @(GLUE-VERB-SUBJ-OBJ P).

   VERB-SUBJ-COMP(P) =
	  (^ PRED) = 'P<(^ SUBJ)(^ COMP)>'
	  @(GLUE-VERB-SUBJ-COMP P).

   VERB-SUBJ-OBJ-OBJTH(P) =
	  (^ PRED) = 'P<(^ SUBJ)(^ OBJ)(^ OBJ-TH)>'
	  @(GLUE-VERB-SUBJ-OBJ-OBJTH P).

   COMP-TENSE = (^ COMP TENSE).

   VPAST = (^ VTYPE) = FIN
	  (^ TENSE) = PST.

----

GLUE   BASIC   TEMPLATES (1.0)

"Templates called by lexical entries"

   GLUE-PROPERNOUN(P) =
	  @(GLUE-REL0-MC ^ e P).

   GLUE-VERB-SUBJ(P) =
	  @(GLUE-REL1-MC (^ SUBJ) e ^ t P).

   GLUE-VERB-SUBJ-OBJ(P) =
	  @(GLUE-REL2-MC (^ SUBJ) e (^ OBJ) e ^ t P).

   GLUE-VERB-SUBJ-OBJ-OBJTH(P) =
	  @(GLUE-REL3-MC (^ SUBJ) e (^ OBJ) e (^ OBJ-TH) e ^ t P).

   GLUE-VERB-SUBJ-COMP(P) =
	  @(GLUE-REL2-MC (^ SUBJ) e (^ COMP) t ^ t P).

   GLUE-NOUN0(P) = "Meaning constructor for nouns associates the e->t-type meaning with the value of PRED"
	  @(GLUE-NOUN0-MC P).

   GLUE-ADJ0(P) = "Meaning constructors for prenominal adjectives provide the basic meaning and the meaning constructor that combines it with the noun"
          @(GLUE-REL1-MC (^ PRED) e ^ t P)
	  @(GLUE-ADJ-MODIFIER `/M`.`/N`.`/x`.and`(M`(x`)`,N`(x`)`)).

   GLUE-QUANT-DET(P) = "Meaning constructor for quantificational determiners, with embedded implication and quantification over the scope structure"
	  @(GLUE-QUANT-MC P).

"Templates defining glue structures"

"Zero-arity predicates have an MR, a semantic structure, and a type."
   GLUE-REL0-MC(FSTR TY P) = 
	  @(GLUE-SEMSTR FSTR %sstr TY)
	  @(GLUE-MEANING %sstr P)
	  %sstr $ (FSTR GLUE).

"Predicates with one or more arguments.  These are the simple cases,
which do not rely on attributes in the semantic structure.  Each
argument has a semantic structure and a type."

"1-place predicates" 
   GLUE-REL1-MC(A1 A1TY FSTR TY P) = 
	  @(GLUE-SEMSTR FSTR %sstr TY)
	  @(GLUE-SEMSTR A1 (%sstr ARG1) A1TY) 
	  @(GLUE-MEANING %sstr P)
	  %sstr $ (FSTR GLUE).

"2-place predicates"	  
   GLUE-REL2-MC(A1 A1TY A2 A2TY FSTR TY P) = 
	  @(GLUE-SEMSTR FSTR %sstr TY)
	  @(GLUE-SEMSTR A1 (%sstr ARG1) A1TY) 
	  @(GLUE-SEMSTR A2 (%sstr ARG2) A2TY) 
	  @(GLUE-MEANING %sstr P)
	  %sstr $ (FSTR GLUE).

"3-place predicates"
   GLUE-REL3-MC(A1 A1TY A2 A2TY A3 A3TY FSTR TY P) = 
	  @(GLUE-SEMSTR FSTR %sstr TY)
	  @(GLUE-SEMSTR A1 (%sstr ARG1) A1TY) 
	  @(GLUE-SEMSTR A2 (%sstr ARG2) A2TY) 
	  @(GLUE-SEMSTR A3 (%sstr ARG3) A3TY) 
	  @(GLUE-MEANING %sstr P)
	  %sstr $ (FSTR GLUE).

"Special meaning constructor for nouns, with type
(^ PRED)_e -o (^ PRED)_t.  This template is also used for quantifiers
like 'everyone', so the local name %sstrn in this template must be different
from the one used in the quantifier template GLUE-QUANT-MC (%sstr)."
   GLUE-NOUN0-MC(P) = 
	  @(GLUE-SEMSTR (^ PRED) (%sstrn ARG1) e) 
	  @(GLUE-SEMSTR (^ PRED) %sstrn t)
	  @(GLUE-MEANING %sstrn P)
	  %sstrn $ (^ GLUE).

"Special meaning constructor to combine basic adjective meanings
with the nouns they modify, with type
((^ PRED)_e -o ^_t) -o 
  ( ((ADJ $ ^) PRED)_e -o ((ADJ $ ^) PRED) -o 
     ((ADJ $ ^) PRED)_e -o ((ADJ $ ^) PRED))."
   GLUE-ADJ-MODIFIER(P) =
     @(GLUE-MODIFIER1 (^ PRED) e ^ t ((ADJ $ ^) PRED) e ((ADJ $ ^) PRED) t P).
 
"General template for one-place modifiers, e.g. adjectives"
  GLUE-MODIFIER1(MODARG MODARGTY MODRES MODRESTY HEADARG HEADARGTY HEADRES HEADRESTY P) =
         "Modifier"
         @(GLUE-SEMSTR MODARG (%sstrm ARG1 ARG1) MODARGTY)
         @(GLUE-SEMSTR MODRES (%sstrm ARG1) MODRESTY)
         "Head"
         @(GLUE-SEMSTR HEADARG (%sstrm ARG2 ARG1) HEADARGTY)
         @(GLUE-SEMSTR HEADRES (%sstrm ARG2) HEADRESTY)
	 "Result"
         @(GLUE-SEMSTR HEADARG (%sstrm ARG3) HEADARGTY)
         @(GLUE-SEMSTR HEADRES %sstrm HEADRESTY)
	 @(GLUE-MEANING %sstrm P) 
	 %sstrm $ (^ GLUE).
	 
"Special template for generalized quantifiers like 'every'."
   GLUE-QUANT-MC(P) =
          "Restriction: (^ PRED)_e -o (^ PRED)_t"
	  @(GLUE-SEMSTR (^ PRED) (%sstr ARG1 ARG1) e)
	  @(GLUE-SEMSTR (^ PRED) (%sstr ARG1) t)
	  "Scope argument: ^_e -o ?SCOPE_t"
	  @(GLUE-SEMSTR ^ (%sstr ARG2 ARG1) e)
	  @(GLUE-SEMSTR %scope (%sstr ARG2) t)
	  "Result: ?SCOPE_t"
	  @(GLUE-SEMSTR %scope %sstr t)
	  "introduce universal quantifier over scope with FORALL attribute"
 	  (%sstr FORALL) = %scope
          "quantifier meaning"
	  @(GLUE-MEANING %sstr P)
	  %sstr $ (^ GLUE).

"The base definitions.
GLUE-SEMSTR is a term: an f-structure (standing in for an s-structure) and a type.
GLUE-MEANING provides the meaning (left-hand side) of the full meaning constructor."

"SSTR is the semantic structure of the f-structure FSTR. Each semantic structure has a type."
   GLUE-SEMSTR(FSTR SSTR TY) = 
	  (SSTR SEMSTR) = FSTR
	  (SSTR TYPE) = TY.

"The meaning side appears as the value of MR in the outermost semantic structure"
   GLUE-MEANING(SSTR P) =  
	  (SSTR MR) = P.

----
